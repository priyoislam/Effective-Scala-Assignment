
ñQ0src/main/scala/democracy/MajorityJudgement.scala*"
democracy/Grade# ”€*Grade€*-
democracy/Grade#`<init>`(). €@*<init>€* 
democracy/Grade.
 *Grade€*$
democracy/Grade.Bad. €©*Bad€*.
democracy/Grade.Mediocre. €©*Mediocre€*2
democracy/Grade.Inadequate. €©*
Inadequate€*.
democracy/Grade.Passable. €©*Passable€*&
democracy/Grade.Good. €©*Good€*.
democracy/Grade.VeryGood. €©*VeryGood€*0
democracy/Grade.Excellent. €©*	Excellent€*+
democracy/Grade.$values. €*$values€*(
democracy/Grade.values().*values€**
democracy/Grade.valueOf().*valueOf€*/
!democracy/Grade.valueOf().($name)*$name€*$
democracy/Grade.$new().*$new€*4
"democracy/Grade.$new().(_$ordinal)*	_$ordinal€*,
democracy/Grade.$new().($name)*$name€*2
democracy/Grade.fromOrdinal().*fromOrdinal€*7
'democracy/Grade.fromOrdinal().(ordinal)*ordinal€*(
democracy/Grade.median().*median€*0
!democracy/Grade.median().(grades)*grades€*)
democracy/Candidate# €*	Candidate€*1
democracy/Candidate#`<init>`(). €@*<init>€*5
%democracy/Candidate#`<init>`().(name) €*name€*)
democracy/Candidate#name. €*name€*(
democracy/Candidate#copy().*copy€*.
!democracy/Candidate#copy().(name)*name€*<
%democracy/Candidate#copy$default$1().*copy$default$1€*$
democracy/Candidate#_1().*_1€*(
democracy/Candidate.
 *	Candidate€**
democracy/Candidate.apply().*apply€*/
"democracy/Candidate.apply().(name)*name€*.
democracy/Candidate.unapply().*unapply€*/
#democracy/Candidate.unapply().(x$1)*x$1€*0
democracy/Candidate.toString().*toString€*#
democracy/Ballot# €*Ballot€*.
democracy/Ballot#`<init>`(). €@*<init>€*6
$democracy/Ballot#`<init>`().(grades) €*grades€**
democracy/Ballot#grades. €*grades€*%
democracy/Ballot#copy().*copy€*/
 democracy/Ballot#copy().(grades)*grades€*9
"democracy/Ballot#copy$default$1().*copy$default$1€*!
democracy/Ballot#_1().*_1€*"
democracy/Ballot.
 *Ballot€*'
democracy/Ballot.apply().*apply€*0
!democracy/Ballot.apply().(grades)*grades€*+
democracy/Ballot.unapply().*unapply€*,
 democracy/Ballot.unapply().(x$1)*x$1€*-
democracy/Ballot.toString().*toString€*'
democracy/Election# €*Election€*0
democracy/Election#`<init>`(). €@*<init>€*B
+democracy/Election#`<init>`().(description) €*description€*@
*democracy/Election#`<init>`().(candidates) €*
candidates€*6
democracy/Election#description. €*description€*4
democracy/Election#candidates. €*
candidates€*)
democracy/Election#elect().*elect€*4
$democracy/Election#elect().(ballots)*ballots€*
local0 €*	allGrades€*
local1*x$1€*
local2*	candidate€*
local3*grade€*$
local4 €*gradesPerCandidate€*3
 democracy/Election#findWinner().*
findWinner€*O
4democracy/Election#findWinner().(gradesPerCandidate)*gradesPerCandidate€*
local5*x$1€*
local6*	candidate€*
local7*grades€*
local8 €*candidatesSeq€*
local9 €*randomIndex€*"
local10 €*bestMedianGrade€*
local11*grades€*!
local12 €*bestCandidates€*
local13*x$1€*
local14*gradess€*4
local15 €*!bestCandidatesMinusOneMedianGrade€*
local16*x$1€*
local17*	candidate€*
local18*grade€*'
democracy/Election#copy().*copy€*;
'democracy/Election#copy().(description)*description€*9
&democracy/Election#copy().(candidates)*
candidates€*;
$democracy/Election#copy$default$1().*copy$default$1€*;
$democracy/Election#copy$default$2().*copy$default$2€*#
democracy/Election#_1().*_1€*#
democracy/Election#_2().*_2€*&
democracy/Election.
 *Election€*)
democracy/Election.apply().*apply€*<
(democracy/Election.apply().(description)*description€*:
'democracy/Election.apply().(candidates)*
candidates€*-
democracy/Election.unapply().*unapply€*.
"democracy/Election.unapply().(x$1)*x$1€*/
democracy/Election.toString().*toString€2
 
democracy/2
 
democracy/Grade#2)
 democracy/Grade#`<init>`().2
 democracy/Grade.2"
 
democracy/Grade.Bad.2'
 democracy/Grade.Mediocre.2)
  democracy/Grade.Inadequate.2'
" *democracy/Grade.Passable.2#
, 0democracy/Grade.Good.2'
2 :democracy/Grade.VeryGood.2(
< Edemocracy/Grade.Excellent.2'
   democracy/Grade.median().2/
   !democracy/Grade.median().(grades)2 
   scala/package.Seq#2
   democracy/Grade#2
 "  'democracy/Grade#2.
!! " scala/collection/SeqOps#apply().2/
!! !scala/collection/SeqOps#sortBy().2/
!! 
!democracy/Grade.median().(grades)2+
!! scala/reflect/Enum#ordinal().2&
!! scala/math/Ordering.Int.2 
!.! /scala/Int#`/`(+3).2-
!*! .scala/collection/SeqOps#size().2/
!#! )!democracy/Grade.median().(grades)2"
(( democracy/Candidate#2-
(( democracy/Candidate#`<init>`().2"
(( !scala/Predef.String#2'
(( democracy/Candidate#name.2
.. democracy/Ballot#2*
.. democracy/Ballot#`<init>`().2
.. scala/Predef.Map#2"
.. 'democracy/Candidate#2
.). .democracy/Grade#2&
.. democracy/Ballot#grades.2!
66 democracy/Election#2,
66 democracy/Election#`<init>`().2"
6!6 'scala/Predef.String#2
656 8scala/Predef.Set#2"
696 Bdemocracy/Candidate#2-
66 democracy/Election#description.2,
6)6 3democracy/Election#candidates.2)
@@ democracy/Election#elect().22
@@ $democracy/Election#elect().(ballots)2 
@@ scala/package.Seq#2
@@ democracy/Ballot#2"
@#@ ,democracy/Candidate#2&
AA 
scala/Predef.assert(+1).2:
AA ,scala/collection/IterableOnceOps#nonEmpty().22
AA $democracy/Election#elect().(ballots)2&
BB 
scala/Predef.assert(+1).28
BB *scala/collection/IterableOnceOps#forall().22
BB $democracy/Election#elect().(ballots)2
B*B ,scala/Any#`==`().29
B#B )+scala/collection/immutable/MapOps#keySet().2&
BB "democracy/Ballot#grades.2,
B-B 7democracy/Election#candidates.2
JJ local02 
JJ scala/package.Seq#2"
JJ !democracy/Candidate#2
J#J (democracy/Grade#25
KK 'scala/collection/IterableOps#flatMap().22
KK $democracy/Election#elect().(ballots)2,
KK "scala/collection/MapOps#map().2&
KK democracy/Ballot#grades.2
K$K -local22
K$K $scala/Tuple2#_1.2
K.K 3local32
K.K .scala/Tuple2#_2.2#
K7K 7scala/Tuple2.apply().2
K7K @local22
KAK Flocal32
QQ local42
QQ scala/Predef.Map#2"
Q Q )democracy/Candidate#2 
Q+Q .scala/package.Seq#2
Q/Q 4democracy/Grade#26
RR (scala/collection/IterableOps#groupMap().2
RR local02
RR scala/Tuple2#_1.2
R!R #scala/Tuple2#_2.2.
TT  democracy/Election#findWinner().2
TT !local42.
^^  democracy/Election#findWinner().2B
^^ #4democracy/Election#findWinner().(gradesPerCandidate)2
^%^ (scala/Predef.Map#2"
^)^ 2democracy/Candidate#2 
^4^ 7scala/package.Seq#2
^8^ =democracy/Grade#2"
^B^ Kdemocracy/Candidate#28
bb  *scala/collection/IterableOnceOps#forall().2B
bb 4democracy/Election#findWinner().(gradesPerCandidate)2
b"b +local62
b"b "scala/Tuple2#_1.2
b-b 3local72
b-b -scala/Tuple2#_2.20
b?b F"scala/collection/SeqOps#isEmpty().2
b8b >local72
c
c local827
c2c 7)scala/collection/IterableOnceOps#toSeq().2-
c-c 1scala/collection/MapOps#keys().2B
cc ,4democracy/Election#findWinner().(gradesPerCandidate)2
d
d local92,
d&d -scala/util/Random#between(+2).2 
dd %scala/util/Random.2
dd scala/util/2-
d?d Cscala/collection/SeqOps#size().2
d1d >local82.
ee  scala/collection/SeqOps#apply().2
ee local82
ee local92
m
m local102
mm  democracy/Grade#27
nXn ])scala/collection/IterableOnceOps#maxBy().21
n5n 8#scala/collection/IterableOps#map().24
n"n (&scala/collection/IterableOps#filter().2/
nn !!scala/collection/MapOps#values().2B
nn 4democracy/Election#findWinner().(gradesPerCandidate)2:
n+n 3,scala/collection/IterableOnceOps#nonEmpty().2
n9n ?local112'
nHn Ndemocracy/Grade.median().2
nBn Gdemocracy/Grade.2
nOn Ulocal112+
n`n gscala/reflect/Enum#ordinal().2&
nhn hscala/math/Ordering.Int.2
r
r local122
rr scala/Predef.Map#2"
rr 'democracy/Candidate#2 
r)r ,scala/package.Seq#2
r-r 2democracy/Grade#24
ss !&scala/collection/IterableOps#filter().2B
ss 4democracy/Election#findWinner().(gradesPerCandidate)2
s#s #scala/Tuple2#_1.2
s%s ,local142
s%s %scala/Tuple2#_2.2
sDs Fscala/Any#`==`().2'
s5s ;democracy/Grade.median().2
s/s 4democracy/Grade.2
s<s Clocal142
sFs Ulocal102!
vv scala/Int#`==`(+3).26
vv (scala/collection/IterableOnceOps#size().2
v	v local122
yy scala/Tuple2#_1.22
yy $scala/collection/IterableOps#head().2
yy local122

†† -local152!

†/† 2scala/Predef.Map#2$

†3† <democracy/Candidate#2"

†>† Ascala/package.Seq#2 

†B† Gdemocracy/Grade#2.

‡‡ scala/collection/MapOps#map().2

‡
‡ local122

‡‡ 'local172 

‡‡ scala/Tuple2#_1.2

‡(‡ -local182 

‡(‡ (scala/Tuple2#_2.2/

‡;‡ =scala/Predef.ArrowAssoc#`->`().2*

‡1‡ 1scala/Predef.ArrowAssoc().2

‡1‡ :local172/

‡D‡ Hscala/collection/SeqOps#diff().2

‡>‡ Clocal1829

‡M‡ M)scala/collection/IterableFactory#apply().2#

‡I‡ Mscala/package.List.2

‡N‡ ]local1020

‹‹  democracy/Election#findWinner().2

‹‹ 4local15PZ FCA4B462E8E3A8CBCFE193960D1089D7